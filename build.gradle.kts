plugins {
    kotlin("jvm") version "2.1.10"
    id("jacoco")
}

group = "org.application"
version = "1.0-SNAPSHOT"
val okhttpVersion = "4.12.0"
val gsonVersion = "2.10.1"
val junitVersion = "5.10.0"
val wiremockVersion = "2.35.0"
val slf4jVersion = "2.0.13"

repositories {
    mavenCentral()
}

dependencies {

    // Implementation dependencies
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
    implementation("com.google.code.gson:gson:$gsonVersion")

    // Testing dependencies
    testImplementation(kotlin("test"))
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.junit.vintage:junit-vintage-engine:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitVersion")
    testImplementation("com.github.tomakehurst:wiremock-jre8:$wiremockVersion")
    testImplementation("org.slf4j:slf4j-simple:$slf4jVersion")
}

// Configure the JaCoCo plugin
jacoco {
    // Specify the JaCoCo tool version. Check for the latest stable version on JaCoCo's GitHub/website.
    toolVersion = "0.8.11" // Current stable version as of 2025-07-11
}

// Configure the 'test' task to automatically generate the JaCoCo execution data
// and then finalize by running the JaCoCo report generation.
tasks.test {
    useJUnitPlatform()
    // Ensures that the 'jacocoTestReport' task runs right after 'test' completes.
    finalizedBy(tasks.jacocoTestReport)
}

// Configure the 'jacocoTestReport' task
tasks.jacocoTestReport {
    // Make sure 'test' task runs before generating the report to ensure .exec data exists.
    dependsOn(tasks.test)

    // Define the types of reports to generate and their output locations.
    reports {
        // HTML report is human-readable and good for local viewing.
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco/test/html"))

        // XML report is useful for integration with CI/CD tools (e.g., SonarQube).
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))

        // CSV report (optional, can be enabled if needed for specific analysis).
        csv.required.set(false)
        // csv.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.csv")) // Uncomment if enabling CSV
    }

    // Define which classes should be included in the coverage analysis.
    // This typically points to your main source code's compiled classes.
    classDirectories.setFrom(
        fileTree(layout.buildDirectory.dir("classes/kotlin/main")) {
            // Optional: Exclude specific classes or packages from coverage if they are boilerplate
            // or cannot realistically be tested (e.g., auto-generated classes).
            // exclude("**/YourApplication.class", "**/config/**")
            // exclude("**/data/**") // Example: Exclude data classes if you don't need coverage on them
        }
    )

    // Specify the JaCoCo execution data files (.exec) generated by the test task.
    // By default, JaCoCo usually looks in 'build/jacoco/test.exec'.
    executionData.setFrom(fileTree(layout.buildDirectory.dir("jacoco")).include("*.exec"))

    // Define the source code directories that correspond to the classes being analyzed.
    sourceSets(sourceSets.main.get())
}

// You can add an optional task to explicitly generate the report:
// tasks.register("coverageReport") {
//     dependsOn(tasks.jacocoTestReport)
//     description = "Generates the JaCoCo code coverage report."
// }